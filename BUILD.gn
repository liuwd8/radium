# Copyright 2024 The Chromium Radium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ui.gni")
import("//build/config/win/console_app.gni")
import("//build/config/win/manifest.gni")
import("//radium/build/branding.gni")
import("//radium/radium_paks.gni")
import("//tools/resources/generate_resource_allowlist.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//v8/gni/v8.gni")

assert(!is_ios, "Chromium/iOS shouldn't use anything in //chrome")

if (is_mac) {
  import("//build/apple/compile_entitlements.gni")
  import("//build/apple/compile_plist.gni")
  import("//build/apple/tweak_info_plist.gni")
  import("//build/compiled_action.gni")
  import("//build/config/apple/symbols.gni")
  import("//build/config/mac/mac_sdk.gni")
  import("//build/config/mac/rules.gni")
  import("//content/public/app/mac_helpers.gni")
  import("//radium/version.gni")
  import("//third_party/icu/config.gni")
}

if (is_win && enable_resource_allowlist_generation) {
  _radium_resource_allowlist = "$target_gen_dir/chrome_resource_allowlist.txt"
}

if (is_win) {
  action("reorder_imports") {
    script = "//radium/tools/win/reorder-imports.py"

    # See comment in radium_dll.gypi in the hardlink_to_output
    # target for why this cannot be 'initial' like the DLL.
    inputs = [ "$root_out_dir/initialexe/radium.exe" ]
    outputs = [
      "$root_out_dir/radium.exe",
      "$root_out_dir/radium.exe.pdb",
    ]
    args = [
      "-i",
      rebase_path("$root_out_dir/initialexe", root_build_dir),
      "-o",
      rebase_path("$root_out_dir", root_build_dir),
      "-a",
      current_cpu,
    ]
    deps = [ ":radium_exe" ]
  }
}

group("all") {
  deps = [
    ":radium",
    "tools/variations",
  ]
}

group("strings") {
  public_deps = [ "//radium/app:strings" ]
}

if (!is_mac) {
  group("radium") {
    deps = []

    if (is_android) {
      deps += [ "//radium/android:radium_public_apk" ]
    } else if (is_win) {
      public_deps = [ ":radium_exe" ]
      data_deps = [ ":radium_exe" ]

      public_deps += [ ":reorder_imports" ]
      data_deps += [ ":reorder_imports" ]
    } else {
      deps += [ ":radium_exe" ]
    }
  }
}

if (is_android) {
  source_set("radium_android_core") {
    sources = [
      "app/android/radium_jni_onload.cc",
      "app/android/radium_jni_onload.h",
      "app/android/radium_main_delegate_android.cc",
      "app/android/radium_main_delegate_android.h",
      "app/radium_main_delegate.cc",
      "app/radium_main_delegate.h",
      "app/startup_timestamps.h",
    ]

    libs = [
      "android",
      "jnigraphics",
    ]

    public_deps = [ "//radium/browser" ]

    deps = [
      ":dependencies",
      "//components/minidump_uploader",
      "//components/safe_browsing:buildflags",
      "//components/safe_browsing/android:safe_browsing_api_handler",
      "//components/safe_browsing/android:safe_browsing_mobile",
      "//components/stylus_handwriting/android",
      "//content/public/app",
      "//radium/common:version_header",
      "//radium/renderer",
    ]

    # Explicit dependency required for JNI registration to be able to
    # find the native side functions.
    if (is_android && is_component_build) {
      deps += [
        "//components/viz/service",
        "//device/gamepad",
        "//ui/events/devices",
      ]
    }

    if (is_android) {
      deps += [ "//components/crash/android:crash_android" ]
    }
  }
}

if (!is_android && !is_mac) {
  executable("radium_exe") {
    if (is_win) {
      output_name = "initialexe/radium"
    } else {
      output_name = "radium"
    }

    sources = []

    public_deps = []
    deps = [ "//base" ]

    data = [ "$root_out_dir/radium_resources.pak" ]
    data_deps = []
    defines = []

    if (is_win) {
      sources += [
        "app/delay_load_failure_hook_win.cc",
        "app/delay_load_failure_hook_win.h",
        "app/main_dll_loader_win.cc",
        "app/main_dll_loader_win.h",
        "app/radium_exe_main_win.cc",
      ]

      deps += [
        ":radium_dll",
        "//components/crash/core/app",
        "//components/crash/core/app:run_as_crashpad_handler",
        "//content:sandbox_helper_win",
        "//content/public/common:static_switches",
        "//radium/app:exit_code_watcher",
        "//radium/common:constants",
        "//radium/common/win:delay_load_failure_support",
        "//radium/install_static:secondary_module",
        "//radium/radium_elf",
        "//sandbox",
        "//sandbox/policy",
        "//sandbox/policy/mojom",
        "//third_party/crashpad/crashpad/util",
      ]

      if (win_console_app) {
        defines += [ "WIN_CONSOLE_APP" ]
      } else {
        # Set /SUBSYSTEM:WINDOWS for chrome.exe itself, unless a console build
        # has been requested.
        configs -= [ "//build/config/win:console" ]
        configs += [ "//build/config/win:windowed" ]
      }

      configs += [
        "//build/config/win:delayloads",
        "//build/config/win:delayloads_not_for_child_dll",
      ]

      if (current_cpu == "x86") {
        # Set the initial stack size to 0.5MiB, instead of the 1.5MiB needed by
        # Chrome's main thread. This saves significant memory on threads (like
        # those in the Windows thread pool, and others) whose stack size we can
        # only control through this setting. Because Chrome's main thread needs
        # a minimum 1.5 MiB stack, the main thread (in 32-bit builds only) uses
        # fibers to switch to a 1.5 MiB stack before running any other code.
        ldflags = [ "/STACK:0x80000" ]
      } else {
        # Increase the initial stack size. The default is 1MB, this is 8MB.
        ldflags = [ "/STACK:0x800000" ]
      }
    } else if (use_aura) {
      sources += [ "app/radium_exe_main_aura.cc" ]
    }

    if (is_linux) {
      sources += [
        "app/radium_dll_resource.h",
        "app/radium_main.cc",
        "app/radium_main_delegate.cc",
        "app/radium_main_delegate.h",
        "app/startup_timestamps.h",
      ]

      deps += [
        ":dependencies",
        "//content/public/app",
        "//radium/common",
        "//radium/common:version_header",
      ]

      if (use_ozone) {
        deps += [ "//ui/ozone" ]
        if (is_linux) {
          deps += [ "//ui/linux:display_server_utils" ]
        }
      }
    }

    # These files are used by the installer so we need a public dep.
    public_deps += [ ":packed_resources" ]

    # The step's output are needed at runtime, so we also need a data_dep.
    data_deps += [ ":packed_resources" ]
  }
}

if (is_win) {
  # This manifest matches what GYP produced. It may not even be necessary.
  windows_manifest("radium_dll_manifest") {
    sources = [
      as_invoker_manifest,
      common_controls_manifest,
    ]
  }

  shared_library("radium_dll") {
    configs += [ "//build/config/compiler:wexit_time_destructors" ]
    configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
    configs += [ "//build/config/compiler:thinlto_optimize_max" ]

    output_name = "radium"

    sources = [
      "//base/win/dllmain.cc",
      "app/radium_main.cc",
      "app/radium_main_delegate.cc",
      "app/radium_main_delegate.h",
      "app/startup_timestamps.h",
    ]

    deps = [
      ":dependencies",
      ":radium_dll_manifest",
      "//components/crash/core/app",
      "//components/crash/core/app:crash_export_thunks",
      "//components/crash/core/common:crash_key",
      "//content/public/app",
      "//radium/child",
      "//radium/radium_elf",
    ]

    configs += [ "//build/config/win:delayloads" ]
  }
} else if (is_mac) {
  radium_helper_name = radium_product_full_name + " Helper"
  radium_framework_name = radium_product_full_name + " Framework"
  radium_framework_version = radium_version_full
  verify_dynamic_libraries = !is_component_build && !is_asan && !is_ubsan_any

  # if (host_os == "mac") {
  #   objdump_path = mac_bin_path
  # } else {
  #   objdump_path = rebase_path("$clang_base_path/bin/", root_build_dir)
  # }

  group("radium") {
    deps = [ ":radium_app" ]

    data_deps = [ ":radium_app" ]

    if (verify_dynamic_libraries) {
      deps += [ ":verify_libraries_radium_app" ]
    }

    if (is_official_build) {
      deps += [
        ":radium_dsym_archive",
        ":radium_dump_syms",
      ]
    }
  }

  tweak_info_plist("radium_app_plist") {
    info_plist = "app/app-Info.plist"
    args = [
      "--breakpad=0",
      "--scm=1",
      "--bundle_id=$radium_mac_bundle_id",
    ]

    args += [ "--keystone=0" ]
  }

  mac_app_bundle("radium_app") {
    output_name = "Radium"

    info_plist_target = ":radium_app_plist"
    extra_substitutions = [
      "CHROMIUM_BUNDLE_ID=$radium_mac_bundle_id",
      "CHROMIUM_SHORT_NAME=$radium_product_short_name",
      "CHROMIUM_CREATOR=$radium_mac_creator_code",
    ]

    sources = [ "app/radium_exe_main_mac.cc" ]

    configs += [ "//build/config/compiler:wexit_time_destructors" ]

    deps = [
      # "//build:branding_buildflags",
      # "//radium/common:buildflags",
      ":radium_app_strings_bundle_data",
      ":radium_resources",
      ":radium_versioned_bundle_data",
      "//base/allocator:early_zone_registration_apple",
      "//radium/common:version_header",
    ]

    # if (enable_updater) {
    #   deps += [ ":chromium_updater_privileged_helper" ]
    # }

    if (enable_stripping) {
      # At link time, preserve the global symbols specified in the .exports
      # file. All other global symbols will be marked as private. The default
      # //build/config/apple:strip_all config will then remove the remaining
      # local and debug symbols.
      ldflags = [ "-Wl,-exported_symbols_list," +
                  rebase_path("app/app.exports", root_build_dir) ]
    }

    # if (is_component_build) {
    #   # In a component build, the framework is directly linked to the
    #   # executable because dlopen() and loading all the dependent dylibs
    #   # is time-consuming, see https://crbug.com/1197495.
    #   deps += [ ":radium_framework+link" ]
    #   ldflags = [ "-Wl,-rpath,@executable_path/../Frameworks" ]

    #   # The Framework is packaged inside the .app bundle. But when using the
    #   # component build, all the dependent shared libraries of :radium_dll are
    #   # not packaged within the framework. This data_deps line makes all of
    #   # those dependent libraries runtime dependencies of the .app bundle.
    #   # This is a bit of a hack, since GN deliberately terminates its search
    #   # for runtime_deps at create_bundle nodes (https://crbug.com/1010347).
    #   data_deps = [ ":radium_framework" ]
    # }
  }

  compiled_action("radium_app_strings") {
    tool = "//radium/tools/build/mac:radium_infoplist_strings_util"

    inputs = []

    outputs = []

    foreach(locale, support_locales) {
      _strings_file = "radium_strings"

      inputs += [ "$root_gen_dir/radium/${_strings_file}_${locale}.pak" ]
    }

    foreach(locale, support_locales_as_apple_outputs) {
      outputs += [
        "$target_gen_dir/app_infoplist_strings/$locale.lproj/InfoPlist.strings",
      ]
    }

    args =
        [
          "-b",
          "radium_strings",
          "-v",
          radium_version_full,
          "-g",
          rebase_path("$root_gen_dir/radium", root_build_dir),
          "-o",
          rebase_path("$target_gen_dir/app_infoplist_strings", root_build_dir),
          "-t",
          "main",
        ] + support_locales

    deps = [ "//radium/app:strings" ]
  }

  foreach(locale, support_locales_as_apple_outputs) {
    bundle_data("radium_app_strings_${locale}_bundle_data") {
      sources = [
        "$target_gen_dir/app_infoplist_strings/$locale.lproj/InfoPlist.strings",
      ]
      outputs =
          [ "{{bundle_resources_dir}}/$locale.lproj/{{source_file_part}}" ]
      public_deps = [ ":radium_app_strings" ]
    }
  }
  group("radium_app_strings_bundle_data") {
    public_deps = []
    foreach(locale, support_locales_as_apple_outputs) {
      public_deps += [ ":radium_app_strings_${locale}_bundle_data" ]
    }
  }

  bundle_data("radium_app_icon") {
    sources = [ "app/theme/mac/app.icns" ]
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }

  bundle_data("radium_resources") {
    sources = [ "app/theme/mac/document.icns" ]
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
    public_deps = [
      ":radium_app_icon",
      ":radium_app_strings",
    ]
  }

  action("clean_up_old_versions") {
    script = "//radium/tools/build/mac/clean_up_old_versions.py"

    _stamp_file = "$target_gen_dir/run_$target_name.stamp"

    outputs = [ _stamp_file ]

    _versions_dir = "$root_out_dir/$radium_product_full_name.app/Contents/Frameworks/$radium_framework_name.framework/Versions"

    args = [
      "--versions-dir",
      rebase_path(_versions_dir, root_build_dir),
      "--stamp",
      rebase_path(_stamp_file, root_build_dir),
      "--keep",
      radium_version_full,
      "--keep",
      "Current",
    ]
  }

  group("verify_radium_framework_order") {
    if (is_component_build) {
      # In a component build, the framework is directly linked to the
      # executable because dlopen() and loading all the dependent dylibs
      # is time-consuming, see https://crbug.com/1197495.
      public_deps = [ ":radium_framework+link" ]
    } else {
      public_deps = [ ":radium_framework" ]
    }
  }

  bundle_data("radium_versioned_bundle_data") {
    sources = [ "$root_out_dir/$radium_framework_name.framework" ]
    outputs = [ "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}" ]
    public_deps = [
      # Before bundling the versioned app components, delete any existing
      # versions.
      ":clean_up_old_versions",

      # verify_radium_framework_order depends on :radium_framework and, for
      # non-component builds, will ensure the export symbol table is correct.
      ":verify_radium_framework_order",
    ]

    # if (enable_widevine_cdm_host_verification) {
    #   # The :radium_framework_widevine_signature target copies into the
    #   # :radium_framework bundle. But because the signing file depends on the
    #   # framework itself, that would cause a cyclical dependency. Instead,
    #   # this dependency directly copies the file into the framework's
    #   # resources directory.
    #   public_deps += [ ":radium_framework_widevine_signature" ]
    # }
  }

  tweak_info_plist("radium_helper_plist") {
    info_plist = "app/helper-Info.plist"
    args = [
      "--breakpad=0",
      "--keystone=0",
      "--scm=0",
    ]
  }

  template("radium_helper_app") {
    mac_app_bundle(target_name) {
      assert(defined(invoker.helper_name_suffix))
      assert(defined(invoker.helper_bundle_id_suffix))

      output_name = radium_helper_name + invoker.helper_name_suffix

      if (defined(invoker.info_plist_target)) {
        info_plist_target = invoker.info_plist_target
      } else {
        info_plist_target = ":radium_helper_plist"
      }

      extra_substitutions = [
        "CHROMIUM_BUNDLE_ID=$radium_mac_bundle_id",
        "CHROMIUM_SHORT_NAME=$radium_product_short_name",
        "CHROMIUM_HELPER_SUFFIX=${invoker.helper_name_suffix}",
        "CHROMIUM_HELPER_BUNDLE_ID_SUFFIX=${invoker.helper_bundle_id_suffix}",
      ]

      sources = [ "app/radium_exe_main_mac.cc" ]

      configs += [ "//build/config/compiler:wexit_time_destructors" ]

      defines = [ "HELPER_EXECUTABLE" ]

      deps = [
        "//base/allocator:early_zone_registration_apple",
        "//build:branding_buildflags",
        "//radium/common:version_header",
        "//sandbox/mac:seatbelt",
      ]

      if (defined(invoker.deps)) {
        deps += invoker.deps
      }

      ldflags = []

      if (is_component_build) {
        # In a component build, the framework is directly linked to the
        # executable because dlopen() and loading all the dependent dylibs
        # is time-consuming, see https://crbug.com/1197495.
        deps += [ ":radium_framework+link_nested" ]

        ldflags += [
          # The helper is in Chromium.app/Contents/Frameworks/Chromium Framework.framework/Versions/X/Helpers/Chromium Helper.app/Contents/MacOS
          # so set rpath up to the base.
          "-Wl,-rpath,@loader_path/../../../../../../../../../..",

          # ... and up to Contents/Frameworks.
          "-Wl,-rpath,@executable_path/../../../../../../..",
        ]
      }

      if (enable_stripping) {
        # At link time, preserve the global symbols specified in the .exports
        # file. All other global symbols will be marked as private. The default
        # //build/config/apple:strip_all config will then remove the remaining
        # local and debug symbols.
        ldflags += [ "-Wl,-exported_symbols_list," +
                     rebase_path("app/app.exports", root_build_dir) ]
      }
    }
  }

  # Merge all helper apps needed by //content and //chrome.
  radium_mac_helpers = content_mac_helpers

  # Create all helper apps required by //content.
  foreach(helper_params, content_mac_helpers) {
    radium_helper_app("radium_helper_app_${helper_params[0]}") {
      helper_name_suffix = helper_params[2]
      helper_bundle_id_suffix = helper_params[1]
    }
  }

  bundle_data("radium_framework_helpers") {
    sources = [ "$root_out_dir/chrome_crashpad_handler" ]

    outputs = [ "{{bundle_contents_dir}}/Helpers/{{source_file_part}}" ]

    public_deps = [ "//components/crash/core/app:chrome_crashpad_handler" ]

    foreach(helper_params, radium_mac_helpers) {
      sources +=
          [ "$root_out_dir/${radium_helper_name}${helper_params[2]}.app" ]
      public_deps += [ ":radium_helper_app_${helper_params[0]}" ]

      # if (verify_dynamic_libraries) {
      #   public_deps +=
      #       [ ":verify_libraries_radium_helper_app_${helper_params[0]}" ]
      # }
    }
  }

  bundle_data("radium_framework_resources") {
    sources = [
      "//ui/gl/resources/angle-metal/gpu_shader_cache.bin",

      # This image is used to badge the lock icon in the
      # authentication dialogs, such as those used for installation
      # from disk image and Keystone promotion (if so enabled).  It
      # needs to exist as a file on disk and not just something in a
      # resource bundle because that's the interface that
      # Authorization Services uses.  Also, Authorization Services
      # can't deal with .icns files.
      "$root_gen_dir/radium/browser/mac/install.sh",
      "app/theme/default_100_percent/product_logo_32.png",
    ]

    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]

    public_deps = [
      ":packed_resources",
      "//radium/browser/mac:install",
    ]

    if (icu_use_data_file) {
      sources += [ "$root_out_dir/icudtl.dat" ]
      public_deps += [ "//third_party/icu:icudata" ]
    }

    if (v8_use_external_startup_data) {
      public_deps += [ "//v8" ]
      if (use_v8_context_snapshot) {
        sources += [ "$root_out_dir/$v8_context_snapshot_filename" ]
        public_deps += [ "//tools/v8_context_snapshot" ]
      }
      if (!use_v8_context_snapshot || include_both_v8_snapshots) {
        sources += [ "$root_out_dir/snapshot_blob.bin" ]
      }
    }
  }

  tweak_info_plist("radium_framework_plist") {
    info_plist = "app/framework-Info.plist"
    args = [
      "--breakpad=0",
      "--keystone=0",
      "--scm=1",
      "--branding",
      radium_product_short_name,
    ]
  }

  # On Mac, speed up the component build by not re-bundling the framework
  # every time it changes. Instead, place all the sources and their deps in
  # a library that the bundled framework links (and re-exports). That way
  # only the library needs to be re-linked when it changes.
  if (is_component_build) {
    _dll_target_type = "shared_library"
  } else {
    _dll_target_type = "source_set"
  }
  target(_dll_target_type, "radium_dll") {
    visibility = [
      ":radium_framework",
      ":radium_framework_create_bundle",
      ":radium_framework_shared_library",
    ]

    sources = [
      # "app/radium_crash_reporter_client.cc",
      # "app/radium_crash_reporter_client.h",
      # "app/radium_crash_reporter_client_mac.mm",
      "app/radium_main.cc",
      "app/radium_main_delegate.cc",
      "app/radium_main_delegate.h",
      "app/radium_main_mac.h",
      "app/radium_main_mac.mm",
      "app/startup_timestamps.h",
    ]

    deps = [
      ":dependencies",
      "//components/memory_system",
      "//components/policy:generated",
      "//content/public/app",
    ]

    if (is_component_build) {
      frameworks = [ "Carbon.framework" ]
    }

    ldflags = [ "-ObjC" ]

    configs += [ "//build/config/compiler:wexit_time_destructors" ]
  }

  # Add the ANGLE .dylibs in the MODULE_DIR of Chromium.app
  bundle_data("angle_binaries") {
    sources = [
      "$root_out_dir/egl_intermediates/libEGL.dylib",
      "$root_out_dir/egl_intermediates/libGLESv2.dylib",
    ]
    outputs = [ "{{bundle_contents_dir}}/Libraries/{{source_file_part}}" ]
    public_deps = [ "//ui/gl:angle_library_copy" ]
  }

  # Add the SwiftShader .dylibs in the MODULE_DIR of Chromium.app
  bundle_data("swiftshader_binaries") {
    sources = [
      "$root_out_dir/vk_intermediates/libvk_swiftshader.dylib",
      "$root_out_dir/vk_intermediates/vk_swiftshader_icd.json",
    ]
    outputs = [ "{{bundle_contents_dir}}/Libraries/{{source_file_part}}" ]
    public_deps = [ "//ui/gl:swiftshader_vk_library_copy" ]
  }

  mac_framework_bundle("radium_framework") {
    output_name = radium_framework_name

    framework_version = radium_framework_version
    framework_contents = [
      "Helpers",
      "Libraries",
      "Resources",
    ]

    configs += [ "//build/config/compiler:wexit_time_destructors" ]
    configs -= [ "//build/config/compiler:thinlto_optimize_default" ]
    configs += [ "//build/config/compiler:thinlto_optimize_max" ]

    info_plist_target = ":radium_framework_plist"
    extra_substitutions = [
      "CHROMIUM_BUNDLE_ID=$radium_mac_bundle_id",
      "CHROMIUM_SHORT_NAME=$radium_product_short_name",
    ]

    public_deps = [ ":radium_dll" ]

    bundle_deps = [
      ":angle_binaries",
      ":radium_framework_helpers",
      ":radium_framework_resources",
      ":swiftshader_binaries",
      "//components/privacy_sandbox/privacy_sandbox_attestations/preload:component_bundle",
    ]

    # configs += [ ":radium_dll_symbol_order" ]
    # if (!is_component_build && !using_sanitizer) {
    #   configs += [ ":radium_dll_symbol_exports" ]
    # }

    ldflags = [
      "-compatibility_version",
      radium_dylib_version,
      "-current_version",
      radium_dylib_version,
    ]

    if (!is_component_build) {
      # Specify a sensible install_name for static builds. The library is
      # dlopen()ed so this is not used to resolve the module.
      ldflags += [ "-Wl,-install_name,@executable_path/../Frameworks/$radium_framework_name.framework/Versions/$radium_version_full/$radium_framework_name" ]
    } else {
      # In the component build, both the :radium_app and various
      # :radium_helper* targets directly link to the Framework target. Use
      # @rpath-based loading so that the dylib ID does not have to be changed
      # with install_name_tool.
      ldflags += [
        "-Wl,-install_name,@rpath/$radium_framework_name.framework/$radium_framework_name",
        "-Wl,-rpath,@loader_path/../../../../../..",
        "-Wl,-reexport_library,libradium_dll.dylib",
      ]

      data_deps = [ ":radium_dll" ]
    }
  }
}

group("dependencies") {
  public_deps = [
    "//components/content_settings/core/common",
    "//components/crash/core/app",
    "//components/memory_system",
    "//components/startup_metric_utils",
    "//radium/browser",
    "//radium/common",
    "//radium/renderer",
  ]
}

if (!is_android) {
  radium_paks("packed_resources") {
    if (is_mac) {
      output_dir = "$root_gen_dir/repack"
      copy_data_to_bundle = true
    } else {
      output_dir = root_out_dir
      mark_as_data = true
    }

    if (enable_resource_allowlist_generation) {
      repack_allowlist = _radium_resource_allowlist
      deps = [ ":resource_allowlist" ]
    }

    # This needs to be in-sync with //radium/app/packed_resources_integrity.h.
    files_to_hash = [
      "radium_resources.pak",
      "radium_100_percent.pak",
    ]
    if (enable_hidpi) {
      files_to_hash += [ "radium_200_percent.pak" ]
    }
  }

  # # This is extracted to deserialize build dependency around
  # # :packed_resources_integrity_hash and improve build parallelism.
  # source_set("packed_resources_integrity_header") {
  #   sources = [ "app/packed_resources_integrity.h" ]

  #   # chrome/app/packed_resources_integrity.cc file is generated in dependency.
  #   deps = [ ":packed_resources_integrity" ]
  # }
}

# Android also supports this, but uses
# //chrome/android:${_variant}_resource_allowlist.
if (is_win && enable_resource_allowlist_generation) {
  generate_resource_allowlist("resource_allowlist") {
    deps = [ ":radium_dll" ]
    inputs = [ "$root_out_dir/radium.dll.pdb" ]
    output = _radium_resource_allowlist
  }
}
