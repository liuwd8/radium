# Copyright 2024 The Radium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
import("//printing/buildflags/buildflags.gni")

if (!is_android) {
  import("//build/config/features.gni")
  import("//tools/grit/grit_rule.gni")
}

if (!is_android) {
  _inspector_protocol = "//third_party/inspector_protocol"
  import("$_inspector_protocol/inspector_protocol.gni")

  _protocol_generated = [
    "protocol/autofill.cc",
    "protocol/autofill.h",
    "protocol/extensions.cc",
    "protocol/extensions.h",
    "protocol/browser.cc",
    "protocol/browser.h",
    "protocol/cast.cc",
    "protocol/cast.h",
    "protocol/emulation.cc",
    "protocol/emulation.h",
    "protocol/page.cc",
    "protocol/page.h",
    "protocol/protocol.h",
    "protocol/pwa.cc",
    "protocol/pwa.h",
    "protocol/security.cc",
    "protocol/security.h",
    "protocol/storage.cc",
    "protocol/storage.h",
    "protocol/system_info.cc",
    "protocol/system_info.h",
    "protocol/target.cc",
    "protocol/target.h",
  ]

  _concatenated_protocol_path =
      "$root_gen_dir/radium/browser/devtools/protocol.json"
  action("concatenate_protocols") {
    script = _inspector_protocol + "/concatenate_protocols.py"

    deps = [ "//third_party/blink/public/devtools_protocol:protocol_version" ]

    _blink_protocol_path =
        "$root_gen_dir/third_party/blink/public/devtools_protocol/protocol.json"
    inputs = [ _blink_protocol_path ]
    output_file = _concatenated_protocol_path
    outputs = [ output_file ]

    args = [ rebase_path(_blink_protocol_path, root_build_dir) ]
    args += [ rebase_path(output_file, root_build_dir) ]
  }

  inspector_protocol_generate("protocol_generated_sources") {
    inspector_protocol_dir = _inspector_protocol
    visibility = [ ":*" ]  # Only targets in this file can depend on this.
    deps = [ ":concatenate_protocols" ]
    out_dir = target_gen_dir
    config_file = "inspector_protocol_config.json"
    use_embedder_types = true

    protocol_path = rebase_path(_concatenated_protocol_path, root_build_dir)
    config_values = [ "protocol.path=$protocol_path" ]

    inputs = [
      _concatenated_protocol_path,
      "inspector_protocol_config.json",
    ]

    outputs = _protocol_generated
  }
}

source_set("devtools") {
  public = []
  sources = []

  deps = [
    "//content/public/browser",
    "//net",
  ]

  if (!is_android) {
    public += [
      "radium_devtools_manager_delegate.h",
      "remote_debugging_server.h",
    ]

    sources += [
      "devtools_browser_context_manager.cc",
      "devtools_browser_context_manager.h",
      "radium_devtools_manager_delegate.cc",
      "radium_devtools_session.cc",
      "radium_devtools_session.h",
      "remote_debugging_server.cc",
    ]

    deps += [
      ":protocol_generated_sources",

      # "//components/custom_handlers",
      # "//components/media_router/browser",
      # "//components/media_router/common/mojom:media_router",
      # "//components/payments/content",
      # "//components/privacy_sandbox/privacy_sandbox_attestations",
      # "//components/security_state/content",
      # "//components/subresource_filter/content/browser:browser",
      # "//components/webapps/browser",
      "//third_party/blink/public/common",
      "//third_party/inspector_protocol:crdtp",
      "//ui/views/controls/webview",
    ]

    # sources += [
    #   "protocol/autofill_handler.cc",
    #   "protocol/autofill_handler.h",
    #   "protocol/browser_handler.cc",
    #   "protocol/browser_handler.h",
    #   "protocol/cast_handler.cc",
    #   "protocol/cast_handler.h",
    #   "protocol/emulation_handler.cc",
    #   "protocol/emulation_handler.h",
    #   "protocol/extensions_handler.cc",
    #   "protocol/extensions_handler.h",
    #   "protocol/page_handler.cc",
    #   "protocol/page_handler.h",
    #   "protocol/pwa_handler.cc",
    #   "protocol/pwa_handler.h",
    #   "protocol/security_handler.cc",
    #   "protocol/security_handler.h",
    #   "protocol/storage_handler.cc",
    #   "protocol/storage_handler.h",
    #   "protocol/system_info_handler.cc",
    #   "protocol/system_info_handler.h",
    #   "protocol/target_handler.cc",
    #   "protocol/target_handler.h",
    # ]

    # if (enable_printing) {
    #   deps += [
    #     "//components/printing/browser/headless",
    #     "//components/printing/browser/print_to_pdf",
    #   ]
    # }
    sources += rebase_path(_protocol_generated, ".", target_gen_dir)
  }
}
